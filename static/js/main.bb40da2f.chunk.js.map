{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search.box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","Response","json","uses","setState","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAOaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,4BAAKN,EAAMI,QAAQG,aCDdC,G,MAAW,SAAAR,GAEpB,OAAO,qBAAKC,UAAU,YAAf,SACND,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCVdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCiCHG,G,wDAlCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJJ,E,gEAQO,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGnC,IAAD,SAE4BE,KAAKR,MAA/BR,EAFF,EAEEA,SAAUS,EAFZ,EAEYA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAlB,GAAQ,OAC7CA,EAASH,KAAKsB,cAAcC,SAASX,EAAYY,wBAErD,OACE,sBAAK7B,UAAU,MAAf,UAEI,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAc,SAAAkB,GAAC,OAAI,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CAAUxB,SAAUiB,W,GA7BZQ,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bb40da2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2$size=180x180`} />\r\n        <h2> { props.monster.name } </h2>\r\n        <p>{ props.monster.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nimport './card-list.styles.css';\r\n\r\n\r\n// think about what should add or randering not how to creat them.\r\n\r\nexport const CardList = props =>{\r\n    // console.log(props)\r\n    return <div className='card-list'>\r\n    {props.monsters.map(monster =>(\r\n        <Card key={monster.id} monster={monster} />\r\n        ))\r\n      }\r\n    \r\n    </div>\r\n} ","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) =>(\r\n    <input\r\n        className='search' \r\n        type='search' \r\n        placeholder= {placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)","import React, { Component } from 'react';\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search.box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(Response => Response.json())\n      .then(uses => this.setState({ monsters: uses }));\n  }\n\n  render(){\n    // search part\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monsters =>\n        monsters.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      );\n    return (\n      <div className=\"App\">\n          {/* Children are the name that past in betwen opening brackets and closing brackests */}\n          <h1>Monsters Rolodex</h1>\n          <SearchBox \n            placeholder='Search monster'\n            handleChange={e => this.setState({searchField: e.target.value})}\n          />\n          <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}